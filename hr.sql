hashd
--software developement life cycle
this is my first git planning
 requirement gathering-->requirement analysis-->design  -->coding -->testing --->release  -->mantainance
 
 1>waterfall model
 2>prototype model
 3>iterative model
 4>spiral model
 5>RAD model
 6>big bang model
 7>fish model
 8>v model
 9>agile model(latest)
 i have added some files
-->waterfall model
*it is the oldest SDLC model
*in this model each phase must be completed before the next phase can begin and there
is not overlapping phases
that is all phases will be performed one by one just like flowing of waterfall downwaRDS.
 
 --ADVANTAGES
  *BEST SUITABLE FOR SMALL PROJECTS 
  *ALL PHASES WILL BE EXECUTED ONE BY ONE WHICH GIVES HIGH VISIBILITY TO THE PROJECT MANAGER
  AND CLIENTS ABOUT THE PROGRAM OF THE PROJECT.
 
--DISADVANTAGE
CLIENT SATISFACTION IS VERY LOW BECAUSE MOST OF THE TIMES CLIENT ADD NEW
REQUIREMENTS IN THE MIDDLE,WHICH WONT BE SUPPORTED.
*TOTAL PROJECT DEVELOPEMENT TIME IS MORE BECAUSE TESTING SHOULD BE DONE
AFTER COMPLETING DEVELOPEMENT ONLY.

--AGILE MODEL
SCRUM MODEL IS NOT LINEAR SEQUENTIAL MODEL.IT IS ITERATIVE MODEL.THAT IS
TOTAL SOFTWARE WILL BE DEVELOPED INCREMENT BY INCREMENT AND EACH INCREMENT IS CALLED SPRINT.

THS IS THE MOST FREQUENTLY USED MODEL FOR SOFTWARE DEVELOPEMENT.
   -SCRUM MODEL
   SCRUM MASTER
SPRINT CYCLE -15/20 DAYS   


EVERY MONTH WE HAVE ONE RELEASE     3RD WEDNESDAY WE HAVE DEPLOYMENT
ND OUR SPRINT CYCLE IS 15 DAYS


DEVELOP->UNIT TESTING->SIT->UAT->PRODUCTION

--VERSION CONTROL TOOL
VERSION CONTROL SYSTEM IS ALSO KNOWN AS SOFTWARE CONFIGURATION MANAGEMENT OR SOURCE CODE MANABERMENT
*EVERYONE REQUIRE VERSION CONTROL SYSTEM TO MANTAIN DIFFERENT VERSIONS OF THEIR DOCUMENT.

-100 FILES DEVELOPED
-CLIENT SUGGESTED SOME CHANGES
-I CHANGED SOME FILE SOURCE CODE TO MEET CLIENT REQUIREMENTS
-I GAVE DEMO AND CLIENT SUGGESTED SOME MORE CHANGES
-I CHANGED SOME FILE SOURCE CODE TO MEET CLIENT REQUIREMENT
-I GAVE DEMO 3RD TIME
-CLIENT ASKED FOR FIRST VERSION ONLY
-HERE WE NEED VERSION CONTROL TOOL



                     -----------------------GIT---------------------
*GIT is a distributed version control system.

local repository-->staging area-->global repository

-git clone
-git add
-git commit
-git push








 
  
